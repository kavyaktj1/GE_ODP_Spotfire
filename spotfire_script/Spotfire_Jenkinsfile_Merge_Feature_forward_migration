

pipeline {
    agent any
    
    options {
      disableConcurrentBuilds()
      timeout(time: 1, unit: 'HOURS')
      ansiColor('xterm')
	  buildDiscarder(logRotator(numToKeepStr: '100'))
    }
	parameters {
        string(description: '', name:'USER_STORY', defaultValue: "")
			
	}
    stages {
		/*
		stage('Merging Changes into Spotfire Master Branch of ODP_Spotfire Repo') {
		steps {
			script {
				try {
					sshagent (credentials: ['git']) {
								sh 'git checkout master'
								sh 'git pull origin spotfire_feature_forward'
								sh('git push origin HEAD:master')
					}
				}
				catch (err) {
					sshagent (credentials: ['git']) {
								sh 'git checkout --theirs -- .'
								sh 'git add -A :/'
								sh 'git commit -m "Adding files to Master Branch of Spotfire Repo"'
								sh('git push origin HEAD:master')
					}
				}
			}
		}
		}
		*/
		
		
		stage ('Download csv from the rally') {
			steps {
				sshagent (credentials: ['git']) {
					script {
						sh 'git checkout master'
						sh 'git pull'
						sh 'python3 spotfire_script/Spotfire_Csv_Download.py --config=spotfire_script/rally_configuration.cfg ${USER_STORY}'
						/*
						copy_status=sh(script:'cp export/spotfire_data.csv Spotfire/forward_migration/Export/spotfire_data.csv;echo $?',returnStatus:true)
                        echo "copy_status=${copy_status}"
                            if (copy_status== 0){
                                echo "Copied successfully"
                            }else {
                                 error "Failed to Copy.So,Exiting."
                            }
						*/
						sh """
							git add -A :/
							git commit -m "Pushing the csv file to remote ODP_Spotfire repo"
							git push origin HEAD:master
						   """
						
					}
				}
			}
		
		}
		
	}
	post {
		always
		{
			script{
				echo 'Clean up workspace'
				deleteDir()
			}
		}
    }
}
